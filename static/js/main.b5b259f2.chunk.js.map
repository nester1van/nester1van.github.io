{"version":3,"sources":["projects/randomPictDog/img/defaultpict.png","projects/randomPictDog/redux/reducer.js","projects/randomPictDog/redux/actions.js","projects/randomPictDog/redux/debugStore.js","projects/randomPictDog/redux/store.js","projects/randomPictDog/components/ButtonGetDog.js","projects/randomPictDog/components/PictDog.js","projects/randomPictDog/components/FetchingProcess.js","projects/randomPictDog/components/ShowDog.js","projects/randomPictDog/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","isFetching","urlPict","defaultpict","status","reducer","state","action","type","debugStore","store","isDebugging","subscribe","console","log","getState","createStore","applyMiddleware","thunkMiddleware","connect","fetchRandomDog","dispatch","fetch","then","response","json","message","receiveResponse","receiveError","onClick","src","alt","ShowDog","className","RandomPictDog","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,yC,sQCGrCC,EAAe,CACjBC,YAAY,EACZC,Q,OAASC,EACTC,OAAQ,WAgBGC,EAbC,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC9C,OAAQA,EAAOC,MACX,ICRoB,eDShB,OAAO,eAAIF,EAAX,CAAkBL,YAAY,IAClC,ICTwB,mBDUpB,MAAO,CAACA,YAAY,EAAOC,QAASK,EAAOL,QAASE,OAAQG,EAAOH,QACvE,ICVqB,gBDWjB,OAAO,eAAIE,EAAX,CAAkBL,YAAY,EAAOG,OAAQG,EAAOH,SACxD,QACI,OAAOE,IETJG,EAPI,SAACC,EAAOC,GACnBA,GACAD,EAAME,WAAU,kBAAMC,QAAQC,IAAIJ,EAAMK,gBCC1CL,EAAQM,YAAYX,EAASY,YAAgBC,MAEnDT,EAAWC,GAAO,GAEHA,QCIAS,cAAQ,KAAM,CAAEC,eHYD,kBAAM,SAACC,GAEjC,OADAA,EAlBuB,CACvBb,KANwB,iBAwBjBc,IAJU,2CAKZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACF,MAAoB,YAAhBA,EAAKrB,OACEiB,EAnBC,SAACI,GAAD,MAAW,CAC/BjB,KAT4B,mBAU5BN,QAASuB,EAAKC,QACdtB,OAAQqB,EAAKrB,QAgBeuB,CAAgBF,IAEzBJ,EAfF,SAACI,GAAD,MAAW,CAC5BjB,KAdyB,gBAezBJ,OAAQqB,EAAKrB,QAaewB,CAAaH,UGpB9BN,EATM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAIpB,OACI,4BAAQS,QAJQ,WAChBT,MAGA,cCIOD,eAJS,SAACb,GAAD,MAAY,CAChCJ,QAASI,EAAMJ,WAGJiB,EAVC,SAAC,GAAe,IAAdjB,EAAa,EAAbA,QACd,OACI,yBAAK4B,IAAK5B,EAAS6B,IAAI,WCmBhBZ,eALS,SAACb,GAAD,MAAY,CAChCL,WAAYK,EAAML,WAClBG,OAAQE,EAAMF,UAGHe,EArBS,SAAC,GAA0B,IAAzBlB,EAAwB,EAAxBA,WAAYG,EAAY,EAAZA,OAWlC,OACI,6BAVIH,EACO,yCACW,YAAXG,EACA,sCAEA,wCCQJ4B,G,MAZC,WACZ,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCCDC,MARf,WACE,OACE,kBAAC,IAAD,CAAUxB,MAAOA,GACf,kBAAC,EAAD,QCmBSyB,MAtBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,kBAAT,mBAGJ,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAlB,QACA,kBAAC,IAAD,CAAOA,KAAK,kBAAiB,kBAAC,EAAD,WCRnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAM5B,c","file":"static/js/main.b5b259f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultpict.c2962b63.png\";","import { SEND_REQUEST, RECEIVE_RESPONSE, RECEIVE_ERROR} from './actions';\r\nimport defaultpict from '../img/defaultpict.png';\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    urlPict: defaultpict,\r\n    status: 'success'\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEND_REQUEST: \r\n            return {...state, isFetching: true};\r\n        case RECEIVE_RESPONSE:\r\n            return {isFetching: false, urlPict: action.urlPict, status: action.status};\r\n        case RECEIVE_ERROR:\r\n            return {...state, isFetching: false, status: action.status};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import fetch from 'cross-fetch';\r\n\r\n//action types\r\nexport const SEND_REQUEST = 'SEND_REQUEST';\r\nexport const RECEIVE_RESPONSE = 'RECEIVE_RESPONSE';\r\nexport const RECEIVE_ERROR = 'RECEIVE_ERROR';\r\n\r\n//action creators\r\nconst sendRequest = () => ({\r\n    type: SEND_REQUEST\r\n})\r\n\r\nconst receiveResponse = (json) => ({\r\n    type: RECEIVE_RESPONSE,\r\n    urlPict: json.message,\r\n    status: json.status\r\n})\r\n\r\nconst receiveError = (json) => ({\r\n    type: RECEIVE_ERROR,\r\n    status: json.status\r\n})\r\n\r\nconst urlRandomDog = 'https://dog.ceo/api/breeds/image/random';\r\n\r\nexport const fetchRandomDog = () => (dispatch) => {\r\n    dispatch(sendRequest());\r\n    return fetch(urlRandomDog)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            if (json.status === 'success') {\r\n                return dispatch(receiveResponse(json));\r\n            }   else {\r\n                return dispatch(receiveError(json));\r\n            }\r\n        })\r\n}","import { fetchRandomDog } from './actions';\r\n\r\nconst debugStore = (store, isDebugging ) => {\r\n    if (isDebugging) {\r\n        store.subscribe(() => console.log(store.getState()));\r\n        // store.dispatch(fetchRandomDog());\r\n    }\r\n}\r\n\r\nexport default debugStore;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport reducer from './reducer';\r\nimport debugStore from './debugStore';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\r\n\r\ndebugStore(store, true);\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchRandomDog } from '../redux/actions';\r\n\r\nconst ButtonGetDog = ({ fetchRandomDog }) => {\r\n    const handleClick = () =>{\r\n        fetchRandomDog();\r\n    }\r\n    return (\r\n        <button onClick={handleClick}>get dog</button>\r\n    )\r\n}\r\n\r\nexport default connect(null, { fetchRandomDog })(ButtonGetDog);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PictDog = ({urlPict}) => {\r\n    return (\r\n        <img src={urlPict} alt=\"dog\"/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    urlPict: state.urlPict\r\n})\r\n\r\nexport default connect(mapStateToProps)(PictDog);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst FetchingProcess = ({isFetching, status}) => {\r\n    const fetchingProcess = () => {\r\n        if (isFetching) {\r\n            return <p>loading...</p>\r\n        } else if (status === 'success') {\r\n            return <p>success</p>\r\n        } else {\r\n            return <p>error</p>\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>{fetchingProcess()}</div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isFetching: state.isFetching,\r\n    status: state.status\r\n})\r\n\r\nexport default connect(mapStateToProps)(FetchingProcess);","import React from 'react';\r\nimport ButtonGetDog from './ButtonGetDog';\r\nimport PictDog from './PictDog';\r\nimport FetchingProcess from './FetchingProcess';\r\nimport './showdog.css';\r\n\r\nconst ShowDog = () => {\r\n    return (\r\n        <div className=\"clearfix\">\r\n            <div className=\"showDog\">\r\n                <ButtonGetDog/>\r\n                <FetchingProcess/>\r\n                <PictDog/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowDog;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport ShowDog from './components/ShowDog';\r\n\r\nfunction RandomPictDog() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ShowDog/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default RandomPictDog;","import React from 'react';\nimport {BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport RandomPictDog from '../src/projects/randomPictDog/';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/randompictdog\">RandomPictDog</Link>\n          </li>\n        </ul>\n        <hr/>\n        <Switch>\n          <Route exact path=\"/\">Home</Route>\n          <Route path=\"/randompictdog\"><RandomPictDog/></Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}